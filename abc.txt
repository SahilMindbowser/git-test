import {expect, vi} from 'vitest';
import {render, fireEvent, screen} from '@testing-library/react';

import {Button} from '../components/ui/button';

describe('Button Component', () => {
  it('renders with a label', () => {
    render(<Button label="Test Button" />);
    const button = screen.getByText('Test Button');
    expect(button).toBeInTheDocument();
  });

  it('handles click events', () => {
    const onClickMock = vi.fn();
    render(<Button label="Click Me" onClick={onClickMock} />);
    const button = screen.getByText('Click Me');
    fireEvent.click(button);
    expect(onClickMock).toHaveBeenCalledTimes(1);
  });

  it('disables the button when disabled prop is true', () => {
    render(<Button label="Disabled Button" disabled={true} />);
    const button = screen.getByText('Disabled Button');
    expect(button).toBeDisabled();
  });

  it('applies primary variant styles', () => {
    render(<Button label="Primary" variant="primary" />);
    const button = screen.getByText('Primary');
    expect(button).toHaveClass('bg-mainPurple text-white');
  });

  it('applies secondary variant styles', () => {
    render(<Button label="Secondary" variant="secondary" />);
    const button = screen.getByText('Secondary');
    expect(button).toHaveClass('bg-none text-black border border-black');
  });

  it('applies tertiary variant styles', () => {
    render(<Button label="Tertiary" variant="tertiary" />);
    const button = screen.getByText('Tertiary');
    expect(button).toHaveClass('bg-white underline');
  });

  //   it('applies unstyled variant styles', () => {
  //     render(<Button label="Unstyled" variant="unstyled" />);
  //     const button = screen.getByText('Unstyled');
  //     expect(button).toHaveClass('');
  //   });

  it('applies custom size styles', () => {
    render(<Button label="Custom Size" size="lg" />);
    const button = screen.getByText('Custom Size');
    expect(button).toHaveClass(
      'h-[50px] w-max px-8 py-5 gap-2.5 text-[14px] rounded-[100px]',
    );
  });

  it('applies custom class names', () => {
    render(<Button label="Custom Classes" className="custom-class" />);
    const button = screen.getByText('Custom Classes');
    expect(button).toHaveClass('custom-class');
  });
});
